package com.example.StudentApi.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration  {

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public InMemoryUserDetailsManager userDetailsManager() {
		
		UserDetails user = User.withUsername("user").password(passwordEncoder().encode("user"))		//user password
				.roles("USER")
				.build();
		
		UserDetails admin = User.withUsername("admin").password(passwordEncoder().encode("admin"))	//admin password
				.roles("ADMIN")
				.build();
		
		return new InMemoryUserDetailsManager(user, admin);			//Parameterized constructor for creating multiple users
	}
	
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeRequests().antMatchers("/student/insert").hasRole("USER")
								.antMatchers("/**").hasRole("ADMIN")
								.anyRequest().authenticated()
								.and()
								.formLogin().permitAll()
								.and()
								.logout().permitAll();
		
		
		return http.build();
	}
	
}
